package com.demo.poc.commons.core.restclient.utils;

import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import java.util.function.Consumer;

import com.demo.poc.commons.core.properties.restclient.HeaderTemplate;
import com.demo.poc.commons.core.tracing.enums.TraceParam;
import lombok.AccessLevel;
import lombok.NoArgsConstructor;

import static com.demo.poc.commons.core.restclient.utils.ParameterMapFiller.addGeneratedParams;
import static com.demo.poc.commons.core.restclient.utils.ParameterMapFiller.addProvidedParams;

@NoArgsConstructor(access = AccessLevel.PRIVATE)
public class HeadersFiller {

  public static Map<String, String> fillHeaders(HeaderTemplate headerTemplate,
                                                Map<String, String> currentHeaders) {

    Consumer<Map<String, String>> providedHeaders = addProvidedParams(headerTemplate.getProvided());
    Consumer<Map<String, String>> generatedHeaders = addGeneratedParams(headerTemplate.getAutoGenerated());
    Consumer<Map<String, String>> forwardedHeaders = addForwardedHeaders(headerTemplate.getForwarded(), currentHeaders);
    Consumer<Map<String, String>> traceHeaders = addTraceHeaders(headerTemplate.getTracing(), currentHeaders);

    Map<String, String> headers = new HashMap<>();
    providedHeaders.accept(headers);
    generatedHeaders.accept(headers);
    forwardedHeaders.accept(headers);
    traceHeaders.accept(headers);

    return headers;
  }

  private static Consumer<Map<String, String>> addTraceHeaders(Map<String, TraceParam> traceHeaders,
                                                               Map<String, String> currentHeaders) {

    return headers -> Optional.ofNullable(traceHeaders).ifPresent(headerMap -> headerMap
        .forEach((headerKey, traceParam) -> {
          Optional.ofNullable(currentHeaders.get(traceParam.getKey()))
              .ifPresent(traceField -> headers.put(traceParam.getKey(), traceParam.getGenerator().apply(traceField)));
        }));
  }

  public static Consumer<Map<String, String>> addForwardedHeaders(Map<String, String> forwardedHeaders,
                                                                  Map<String, String> currentHeaders) {
    return params -> Optional.ofNullable(forwardedHeaders).ifPresent(paramMap -> paramMap
        .forEach((paramKey, paramName) -> setForwardedIfPresent(params, currentHeaders, paramKey, paramName)));
  }

  private static void setForwardedIfPresent(Map<String, String> forwardedParams,
                                            Map<String, String> currentParams,
                                            String paramKey,
                                            String paramName) {
    Optional<String> currentParam = Optional.ofNullable(currentParams.get(paramName));
    currentParam.ifPresent(paramValue -> forwardedParams.put(paramKey, paramValue));
  }
}